---
interface Props {
	title: string;
}

const { title } = Astro.props;
import Header from "../components/header.astro";
import Footer from "../components/footer.astro";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="stylesheet" href="/tabler-icons.css">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<Header />
		<slot />
		<Footer />
	</body>
</html>
<style is:global>
html {
    scroll-behavior: smooth;
}
button {
    border: none;
    color: white;
    cursor: pointer;
    background-color: transparent;
}
h1 {
    font-size: 3rem;
    margin-block: 0;
}

h2 {
    font-size: 2rem;
    margin-block: 0;
}

p {
    font-size: 1.2rem;
    line-height: 1.5;
}

body {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    background-color: rgb(22, 25, 36);
    color: white;
    font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
    width: 100vw;
    overflow-x: hidden;
}
a {
        text-decoration: none;
        color: white;
    }
</style>
<script>
	function setLanguage(currentLanguage) {
		localStorage.setItem("lang", currentLanguage);
		fetch(`/lang/${currentLanguage}.json`)
			.then((response) => {
				return response.json();
			})
			.then((data) => {
				for (const key in data) {
					if (Array.isArray(data[key])) {
						const array = data[key];
						const keys = Object.keys(array[0]);
						keys.forEach((k) => {
							document
								.getElementById(key)
								.querySelectorAll(`.${k}`)
								.forEach((element: HTMLElement, index) => {
									element.innerText = array[index][k];
								});
						});
					} else {
						document.getElementById(key).innerHTML = data[key];
					}
				}
			})
			.finally(() => {
				document.body.style.display = "block";
			});
	}
	const currentLanguage =
		(localStorage.getItem("lang") || navigator.language.split("-")[0]) ===
		"es"
			? "es"
			: "en";
	document.querySelector("html").setAttribute("lang", currentLanguage);
	document.body.style.display = "none";
	setLanguage(currentLanguage);
	const es = document.getElementById("es");
	const en = document.getElementById("en");
	es.addEventListener("click", () => {
		setLanguage("es");
	});
	en.addEventListener("click", () => {
		setLanguage("en");
	});
</script>
